"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProjectUUID = exports.getProjectDepGraph = exports.getProjectIssues = exports.getProject = void 0;
const Error = require("../customErrors/apiError");
const snykClient = require("snyk-api-ts-client");
const getProject = async (orgID, projectID) => {
    const project = await new snykClient.Org({ orgId: orgID })
        .project({ projectId: projectID })
        .get();
    return project;
};
exports.getProject = getProject;
const getProjectUUID = async (orgID, nonUUIDProjectID, projectType = 'cli') => {
    const allProjects = await new snykClient.Org({ orgId: orgID }).projects.post({});
    const allProjectsArray = allProjects.projects;
    const selectedProjectArray = allProjectsArray.filter((project) => project.name == nonUUIDProjectID && project.origin == projectType);
    if (selectedProjectArray.length == 0) {
        throw new Error.NotFoundError('Snyk API - Could not find a monitored project matching. \
                                        Make sure to specify the right org when snyk test using --org');
    }
    else if (selectedProjectArray.length > 1) {
        throw new Error.NotFoundError('Snyk API - Could not find a monitored project matching accurately. \
                                        Make sure to specify the right org when snyk test using --org. Branch support coming soon.');
    }
    return selectedProjectArray[0].id;
};
exports.getProjectUUID = getProjectUUID;
const getProjectIssues = async (orgID, projectID) => {
    // No filter on patched or non patch issue, getting both
    const filters = {
        filters: {
            severities: ['high', 'medium', 'low'],
            exploitMaturity: [
                'mature',
                'proof-of-concept',
                'no-known-exploit',
                'no-data',
            ],
            types: ['vuln', 'license'],
            ignored: false,
        },
    };
    const projectIssues = await new snykClient.Org({ orgId: orgID })
        .project({ projectId: projectID })
        .issues.post(filters);
    return projectIssues;
};
exports.getProjectIssues = getProjectIssues;
const getProjectDepGraph = async (orgID, projectID) => {
    const projectDepGraph = await new snykClient.Org({ orgId: orgID })
        .project({ projectId: projectID })
        .depgraph.get();
    return projectDepGraph;
};
exports.getProjectDepGraph = getProjectDepGraph;
//# sourceMappingURL=snyk.js.map