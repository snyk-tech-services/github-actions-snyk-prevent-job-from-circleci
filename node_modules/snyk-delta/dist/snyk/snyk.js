"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProjectUUID = exports.getProjectDepGraph = exports.getProjectIssues = exports.getProject = void 0;
const snyk_utils_1 = require("./snyk_utils");
const Error = require("../customErrors/apiError");
const getProject = async (orgID, projectID) => {
    const projectEndpoint = "/org/" + orgID + "/project/" + projectID;
    const project = await snyk_utils_1.default("GET", projectEndpoint);
    return project;
};
exports.getProject = getProject;
const getProjectUUID = async (orgID, nonUUIDProjectID, projectType = 'cli') => {
    const allProjectsEndpoint = "/org/" + orgID + "/projects";
    const allProjects = await snyk_utils_1.default("POST", allProjectsEndpoint);
    const allProjectsArray = allProjects.projects;
    const selectedProjectArray = allProjectsArray.filter(project => project.name == nonUUIDProjectID && project.origin == projectType);
    if (selectedProjectArray.length == 0) {
        throw new Error.NotFoundError('Snyk API - Could not find a monitored project matching. \
                                        Make sure to specify the right org when snyk test using --org');
    }
    else if (selectedProjectArray.length > 1) {
        throw new Error.NotFoundError('Snyk API - Could not find a monitored project matching accurately. \
                                        Make sure to specify the right org when snyk test using --org. Branch support coming soon.');
    }
    return selectedProjectArray[0].id;
};
exports.getProjectUUID = getProjectUUID;
const getProjectIssues = async (orgID, projectID) => {
    // No filter on patched or non patch issue, getting both
    const filters = `{
                        "filters": {
                            "severities": [
                                "high",
                                "medium",
                                "low"
                            ],
                            "exploitMaturity": [
                                "mature",
                                "proof-of-concept",
                                "no-known-exploit",
                                "no-data"
                            ],
                            "types": [
                                "vuln",
                                "license"
                            ],
                            "ignored": false
                        }
                    }
                `;
    const projectIssuesEndpoint = "/org/" + orgID + "/project/" + projectID + "/issues";
    const projectIssues = await snyk_utils_1.default("POST", projectIssuesEndpoint, filters);
    return projectIssues;
};
exports.getProjectIssues = getProjectIssues;
const getProjectDepGraph = async (orgID, projectID) => {
    const projectDepGraphEndpoint = "/org/" + orgID + "/project/" + projectID + "/dep-graph";
    const projectDepGraph = await snyk_utils_1.default("GET", projectDepGraphEndpoint);
    return projectDepGraph;
};
exports.getProjectDepGraph = getProjectDepGraph;
//# sourceMappingURL=snyk.js.map