interface groupClass {
    groupId: string;
}
export declare class Group {
    private currentContext;
    private fullResponse;
    private groupId;
    settings: Settings.Settings;
    members: Members.Members;
    tags: Tags.Tags;
    audit: Audit.Audit;
    constructor(Groupparam: groupClass, fullResponse?: boolean);
    org(Orgparam?: orgClass): Org.Org;
}
export interface SettingsPutBodyType {
    /**
     * The new session length for the group in minutes. This must be an integer between 1 and 43200 (30 days). Setting this value to null will result in this group inheriting from the global default of 30 days.
     */
    sessionLength?: number;
}
export interface SettingsGetResponseType {
    /**
     * The new session length for the group in minutes. This must be an integer between 1 and 43200 (30 days). Setting this value to null will result in this group inheriting from the global default of 30 days.
     */
    sessionLength?: number;
}
export interface SettingsPutResponseType {
    /**
     * The new session length for the group in minutes. This must be an integer between 1 and 43200 (30 days). Setting this value to null will result in this group inheriting from the global default of 30 days.
     */
    sessionLength?: number;
}
export declare namespace Settings {
    class Settings {
        private currentContext;
        constructor(parentContext: Object, fullResponse?: boolean);
        get(): Promise<SettingsGetResponseType>;
        put(body: SettingsPutBodyType): Promise<SettingsPutResponseType>;
    }
}
export interface MembersGetResponseType {
    [key: string]: any;
}
export declare namespace Members {
    class Members {
        private currentContext;
        constructor(parentContext: Object, fullResponse?: boolean);
        get(): Promise<MembersGetResponseType>;
    }
}
interface orgClass {
    orgId: string;
}
export declare namespace Org {
    class Org {
        private currentContext;
        private orgId;
        members: Members.Members;
        constructor(parentContext: Object, Orgparam: orgClass, fullResponse?: boolean);
    }
    interface MembersPostBodyType {
        /**
         * The id of the user.
         */
        userId?: string;
        /**
         * The role of the user, "admin" or "collaborator".
         */
        role?: string;
    }
    type MembersPostResponseType = any;
    namespace Members {
        class Members {
            private currentContext;
            constructor(parentContext: Object, fullResponse?: boolean);
            post(body: MembersPostBodyType): Promise<any>;
        }
    }
}
export interface TagsGetResponseType {
    [key: string]: any;
}
export declare namespace Tags {
    class Tags {
        private currentContext;
        delete: Delete.Delete;
        constructor(parentContext: Object, fullResponse?: boolean);
        get(perPage?: number, page?: number): Promise<TagsGetResponseType>;
        getAll(noLimitMode?: boolean): Promise<TagsGetResponseType[]>;
    }
    interface DeletePostBodyType {
        /**
         * Valid tag key.
         */
        key?: string;
        /**
         * Valid tag value.
         */
        value?: string;
        /**
         * force delete tag that has entities (default is `false`).
         */
        force?: boolean;
    }
    interface DeletePostResponseType {
        /**
         * Valid tag key.
         */
        key?: string;
        /**
         * Valid tag value.
         */
        value?: string;
        /**
         * force delete tag that has entities (default is `false`).
         */
        force?: boolean;
    }
    namespace Delete {
        class Delete {
            private currentContext;
            constructor(parentContext: Object, fullResponse?: boolean);
            post(body: DeletePostBodyType): Promise<DeletePostResponseType>;
        }
    }
}
export interface AuditPostBodyType {
    filters?: {
        /**
         * User public ID. Will fetch only audit logs originated from this user's actions.
         */
        userId?: string;
        /**
         * User email address. Will fetch only audit logs originated from this user's actions.
         */
        email?: string;
        /**
         * Will return only logs for this specific event.
         */
        event?: 'api.access' | 'group.create' | 'group.edit' | 'group.notification_settings.edit' | 'group.org.add' | 'group.org.remove' | 'group.service_account.create' | 'group.service_account.delete' | 'group.service_account.edit' | 'group.settings.edit' | 'group.request_access_settings.edit' | 'group.user.provision.create' | 'group.user.provision.accept' | 'group.user.provision.delete' | 'group.user.add' | 'group.user.remove' | 'group.user.role.edit' | 'group.tag.create' | 'group.tag.delete' | 'group.policy.create' | 'group.policy.edit' | 'group.policy.delete' | 'group.settings.feature_flag.edit';
        /**
         * Will return only logs for this specific project.
         */
        projectId?: string;
    };
}
export declare type AuditPostResponseType = any;
export declare namespace Audit {
    class Audit {
        private currentContext;
        constructor(parentContext: Object, fullResponse?: boolean);
        post(body: AuditPostBodyType, from?: string, to?: string, page?: number, sortOrder?: string): Promise<any>;
        postAll(noLimitMode: boolean | undefined, body: AuditPostBodyType, from?: string, to?: string, sortOrder?: string): Promise<any>;
    }
}
export {};
